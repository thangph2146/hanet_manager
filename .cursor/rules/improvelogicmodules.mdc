---
description: 
globs: 
alwaysApply: false
---
# Hướng Dẫn Tạo Module Mới Trong CodeIgniter 4.6

## Cấu Trúc Module

Các module CodeIgniter 4.6 cần tuân theo cấu trúc sau:
```
app/Modules/TenModule/
├── Config/
│   └── Routes.php
├── Controllers/
│   ├── TenModule.php
│   └── Dashboard.php (tùy chọn)
├── Models/
│   └── TenModuleModel.php
├── Entities/
│   └── TenModule.php
├── Views/
│   ├── index.php
│   ├── new.php
│   ├── edit.php
│   ├── listdeleted.php
│   └── master_scripts.php
└── Database/
    └── Migrations/
        └── YYYY-MM-DD-HHMMSS_TenModule.php
```

## Quy Tắc Đặt Tên

1. **Tên module**: PascalCase cho thư mục (VD: `HeDaoTao`)
2. **Controller**: PascalCase, trùng với tên module (VD: `HeDaoTao.php`)
3. **Model**: PascalCase, thêm hậu tố "Model" (VD: `HeDaoTaoModel.php`)
4. **Entity**: PascalCase, trùng với tên module (VD: `HeDaoTao.php`)
5. **Table**: snake_case (VD: `he_dao_tao`)
6. **Primary key**: snake_case, tên bảng + "_id" (VD: `he_dao_tao_id`)

## Config/Routes.php

```php
<?php
namespace Config;

$routes = Services::routes();

$routes->group('tenmodule', ['namespace' => 'App\Modules\tenmodule\Controllers'], function ($routes) {
    $routes->get('/', 'TenModule::index');
    $routes->get('dashboard', 'Dashboard::index');
    $routes->get('statistics', 'Dashboard::statistics');
    $routes->get('listdeleted', 'TenModule::listdeleted');
    $routes->get('new', 'TenModule::new');
    $routes->post('create', 'TenModule::create');
    $routes->get('edit/(:num)', 'TenModule::edit/$1');
    $routes->post('update/(:num)', 'TenModule::update/$1');
    $routes->get('delete/(:num)', 'TenModule::delete/$1');
    $routes->post('delete/(:num)', 'TenModule::delete/$1');
    $routes->get('restore/(:num)', 'TenModule::restore/$1');
    $routes->post('restore/(:num)', 'TenModule::restore/$1');
    $routes->post('status/(:num)', 'TenModule::status/$1');
    $routes->post('deleteMultiple', 'TenModule::deleteMultiple');
    $routes->post('restoreMultiple', 'TenModule::restoreMultiple');
    $routes->post('statusMultiple', 'TenModule::statusMultiple');
    $routes->get('deleted', 'TenModule::deleted');
});
```

## Controllers/TenModule.php

Controller cần kế thừa `BaseController` và có các phương thức:

- `__construct()`: Khởi tạo model và validation
- `index()`: Hiển thị danh sách
- `listdeleted()`: Hiển thị danh sách đã xóa
- `new()`: Form tạo mới
- `create()`: Xử lý tạo mới
- `edit($id)`: Form chỉnh sửa
- `update($id)`: Xử lý cập nhật
- `delete($id)`: Xóa tạm thời
- `restore($id)`: Khôi phục
- `permanentDelete($id)`: Xóa vĩnh viễn
- `status($id)`: Đổi trạng thái
- `deleteMultiple()`: Xóa nhiều
- `restoreMultiple()`: Khôi phục nhiều
- `statusMultiple()`: Đổi trạng thái nhiều

## Models/TenModuleModel.php

Model cần kế thừa `BaseModel` và có:

```php
protected $table = 'ten_module';
protected $primaryKey = 'ten_module_id';
protected $returnType = 'App\Modules\tenmodule\Entities\TenModule';
protected $useSoftDeletes = true;
protected $useTimestamps = true;

protected $allowedFields = [
    'ten_ten_module',
    'ma_ten_module',
    'status',
    'bin',
    'created_at',
    'updated_at',
    'deleted_at'
];

// Phương thức chuẩn
public function getAllActive() { }
public function getAllDeleted() { }
public function getActive() { }
public function isNameExists($ten, $exceptId = null) { }
public function isCodeExists($ma, $exceptId = null) { }
public function restore($id) { }
```

## Entities/TenModule.php

Entity cần kế thừa `BaseEntity` và có:

- Thuộc tính: validationRules, validationMessages
- Getter/setter cho từng trường
- Phương thức định dạng ngày tháng

## Migrations

Tạo migration với cấu trúc bảng cơ bản:
- Primary key (id)
- Tên (thường là trường bắt buộc)
- Mã (tùy chọn)
- Trạng thái (status)
- Thùng rác (bin)
- Thời gian (created_at, updated_at, deleted_at)

## Views

Các view cần tuân thủ mẫu giao diện chung của hệ thống:

1. **index.php**: Danh sách với DataTable và các nút chức năng
2. **new.php**: Form thêm mới
3. **edit.php**: Form chỉnh sửa
4. **listdeleted.php**: Danh sách đã xóa
5. **master_scripts.php**: Tập hợp CSS/JS chung

## Quy Tắc UX/UI

1. **DataTable**: Sử dụng DataTable cho danh sách
2. **Form**: Có validation client và server
3. **Thông báo**: SweetAlert2 cho thông báo thành công/lỗi
4. **Modal**: Sử dụng modal để xác nhận các thao tác xóa, đổi trạng thái
5. **Responsive**: Đảm bảo giao diện responsive

## Quy Tắc Bảo Mật

1. **Validation**: Luôn kiểm tra dữ liệu đầu vào
2. **Escaping**: Sử dụng esc() cho output
3. **CSRF**: Sử dụng CSRF token trong form

## Quy Tắc Hiệu Suất

1. **Model caching**: Sử dụng cache cho truy vấn lặp lại
2. **Lazy loading**: Tránh N+1 query problem

## Checklist Tạo Module Mới

1. ✅ Tạo cấu trúc thư mục đầy đủ
2. ✅ Tạo migration và chạy
3. ✅ Tạo Entity với validation
4. ✅ Tạo Model với các phương thức chuẩn
5. ✅ Tạo Controller với đầy đủ chức năng
6. ✅ Tạo Routes cho module
7. ✅ Tạo Views với giao diện chuẩn
8. ✅ Kiểm thử toàn bộ chức năng